{"uid":"331ce6edc4a561a8","name":"Авторизация пользователя с валидным логином и пустым паролем","fullName":"tests.test_autorization.TestAuthUser#test_auth_valid_username_and_no_password","historyId":"7f0db1bcd228b7037acfb14a3ddad322","time":{"start":1720112679121,"stop":1720112679121,"duration":0},"description":"При проверке используются валидный логин пользователя Aleska","descriptionHtml":"<p>При проверке используются валидный логин пользователя Aleska</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","statusTrace":"request = <SubRequest 'driver' for <Function test_auth_valid_username_and_no_password>>\n\n    @pytest.fixture(autouse=True, scope='function')\n    def driver(request):\n        chrome_options = Options()\n        chrome_options.add_argument('--window-size=1920,1080')  # размер окна is 1920x1080\n        # chrome_options.add_argument('--no-sandbox')  # no sandbox\n        chrome_options.add_argument('--disable-dev-shm-usage')  # overcome limited resource problems\n        # chrome_options.add_argument('--incognito')  # режим инкогнито\n        # chrome_options.add_argument('--headless')  # режим без UI\n        # chrome_options.add_argument('--ignore-certificate-errors')  # режим игнорирования сертификата\n>       driver = webdriver.Chrome(options=chrome_options)\n\nconftest.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb29dc6ec00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...r/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1720112678342,"stop":1720112678363,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1720112679122,"stop":1720112679312,"duration":190},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1125, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 880, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/workspace/conftest.py\", line 17, in driver\n    driver = webdriver.Chrome(options=chrome_options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 299, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Авторизация пользователя"},{"name":"severity","value":"Trivial"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_autorization"},{"name":"subSuite","value":"TestAuthUser"},{"name":"host","value":"114802e03b55"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_autorization"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"trivial","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":26,"unknown":0,"total":28},"items":[{"uid":"a024c37d7f704086","status":"passed","time":{"start":1720037757272,"stop":1720037761609,"duration":4337}},{"uid":"81e0bbcceada9057","status":"passed","time":{"start":1720037629360,"stop":1720037633776,"duration":4416}},{"uid":"711605b27a988ed7","status":"passed","time":{"start":1720031092246,"stop":1720031096665,"duration":4419}},{"uid":"79e1b285b82abb2d","status":"passed","time":{"start":1719947245303,"stop":1719947249357,"duration":4054}},{"uid":"e5a125b7d6ca9545","status":"passed","time":{"start":1719946497685,"stop":1719946503644,"duration":5959}},{"uid":"b02abdefcef6bb69","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","time":{"start":1719946381602,"stop":1719946381602,"duration":0}},{"uid":"d0ebde4f5b37c76c","status":"passed","time":{"start":1719942414042,"stop":1719942419113,"duration":5071}},{"uid":"5b19c2c16929c0d6","status":"passed","time":{"start":1719942128806,"stop":1719942134221,"duration":5415}},{"uid":"3cce879a029894a5","status":"passed","time":{"start":1719941448893,"stop":1719941452181,"duration":3288}},{"uid":"f2d29895d1fa5bb9","status":"passed","time":{"start":1719937700080,"stop":1719937705199,"duration":5119}},{"uid":"83d44565f8b6a871","status":"passed","time":{"start":1719936991770,"stop":1719936996247,"duration":4477}},{"uid":"5f88e97325f4f7c9","status":"passed","time":{"start":1719935937221,"stop":1719935940764,"duration":3543}},{"uid":"3e455bb584b1473d","status":"passed","time":{"start":1719934980975,"stop":1719934984419,"duration":3444}},{"uid":"1a8a9a07cf5596a1","status":"passed","time":{"start":1719859036675,"stop":1719859040985,"duration":4310}},{"uid":"27ec4edad74aeed4","status":"passed","time":{"start":1719858463999,"stop":1719858468077,"duration":4078}},{"uid":"2d17e1c0c42df6ff","status":"passed","time":{"start":1719858256830,"stop":1719858262233,"duration":5403}},{"uid":"5360888d78274199","status":"passed","time":{"start":1719858005315,"stop":1719858009043,"duration":3728}},{"uid":"8d17f13e0e949f35","status":"passed","time":{"start":1719857808265,"stop":1719857812422,"duration":4157}},{"uid":"3db79a547838b718","status":"passed","time":{"start":1719857490215,"stop":1719857493648,"duration":3433}},{"uid":"317aa993d0dfb174","status":"passed","time":{"start":1719857066484,"stop":1719857069932,"duration":3448}}]},"tags":["regression"]},"source":"331ce6edc4a561a8.json","parameterValues":[]}