{"uid":"da982a6d65523fd7","name":"Проверка можно изменить никнейм","fullName":"tests.test_editing_profile.TestEditingProfile#test_you_can_change_your_nickname","historyId":"5af1413db6c48e030524cc9a70ef831f","time":{"start":1738874898650,"stop":1738874903111,"duration":4461},"description":"Проверяется на пользователе Aleska","descriptionHtml":"<p>Проверяется на пользователе Aleska</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <test_editing_profile.TestEditingProfile object at 0x7f49b6ff2090>\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...'carrot-messenger-frame'), 'Чат кэррот': ('xpath', '//div[contains(@class,\"carrot-messenger-frame-container\")]')}, ...}\nlogin_to_app = None\n\n    @allure.title('Проверка можно изменить никнейм')\n    @allure.description('Проверяется на пользователе Aleska')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_you_can_change_your_nickname(self, elements, login_to_app):\n        with allure.step('Нажать кнопку профиль'):\n            self.app.profile_button_click()\n    \n        with allure.step('Запомнить никнейм пользователя'):\n            element = elements['Общие']\n            self.profile_page.get_element_text(element['Заголовок страницы'])\n    \n        with allure.step('Нажать на кнопку редактирования никнейма'):\n            element_profile = elements['Профиль пользователя']\n            self.profile_page.do_click(element_profile['Кнопка бургер-меню'])\n    \n        with allure.step('Нажать \"Редактировать профиль\"'):\n            element = elements['Поп ап бургер-меню профиля']\n            self.profile_page.do_click(element['Редактировать профиль'])\n    \n        with allure.step('Очистить поле Никнейм'):\n            element = elements['Страница редактировать профиль']\n            self.edit_profile_page.clear(element['Поле никнейм'])\n    \n        with (allure.step('Ввести в поле рандомный никнейм')):\n            new_username = fake.user_name()\n            self.edit_profile_page.field_send_keys(element['Поле никнейм'], text=new_username)\n    \n        with allure.step('Нажать кнопку Сохранить'):\n            self.edit_profile_page.scroll_to_element(element['Кнопка сохранить'])\n            self.edit_profile_page.do_click(element['Кнопка сохранить'])\n    \n        with allure.step('Проверить, что отображается новый никнейм пользователя'):\n            self.profile_page.find_element(element_profile['О себе'])\n            element = elements['Общие']\n            self.assertion.text_in_element(element['Заголовок страницы'], expected_text=new_username)\n    \n        with allure.step('Вернуть профилю никнейм Aleska'):\n>           self.edit_profile_page.change_username(username='Aleska')\n\ntests/test_editing_profile.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/pages/edit_profile_page.py:28: in change_username\n    self.profile_page.do_click(config.locators.ProfilePageLocators.locators['Кнопка бургер-меню'])\nbase/base_page.py:79: in do_click\n    elem = WebDriverWait(self.driver, wait_time).until(EC.element_to_be_clickable(locator))\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:364: in _predicate\n    element = visibility_of(target)(driver)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:173: in _predicate\n    return _element_if_visible(element)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:179: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:252: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f49b704ce60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1738874454511,"stop":1738874454512,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1738874891413,"stop":1738874891832,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Инициализация локаторов","time":{"start":1738874891832,"stop":1738874891832,"duration":0},"status":"passed","steps":[{"name":"Инициализация локаторов","time":{"start":1738874891832,"stop":1738874891832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"request","value":"<SubRequest 'elements' for <Function test_you_can_change_your_nickname>>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Авторизация пользователя в системе","time":{"start":1738874891832,"stop":1738874898650,"duration":6818},"status":"passed","steps":[{"name":"Авторизация пользователя в системе","time":{"start":1738874891832,"stop":1738874898650,"duration":6818},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"request","value":"<SubRequest 'login_to_app' for <Function test_you_can_change_your_nickname>>"},{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"92ca799b4ad1c79bb1b8e58de7dcbbe1\")>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"setup","time":{"start":1738874891832,"stop":1738874891832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяется на пользователе Aleska","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <test_editing_profile.TestEditingProfile object at 0x7f49b6ff2090>\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...'carrot-messenger-frame'), 'Чат кэррот': ('xpath', '//div[contains(@class,\"carrot-messenger-frame-container\")]')}, ...}\nlogin_to_app = None\n\n    @allure.title('Проверка можно изменить никнейм')\n    @allure.description('Проверяется на пользователе Aleska')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_you_can_change_your_nickname(self, elements, login_to_app):\n        with allure.step('Нажать кнопку профиль'):\n            self.app.profile_button_click()\n    \n        with allure.step('Запомнить никнейм пользователя'):\n            element = elements['Общие']\n            self.profile_page.get_element_text(element['Заголовок страницы'])\n    \n        with allure.step('Нажать на кнопку редактирования никнейма'):\n            element_profile = elements['Профиль пользователя']\n            self.profile_page.do_click(element_profile['Кнопка бургер-меню'])\n    \n        with allure.step('Нажать \"Редактировать профиль\"'):\n            element = elements['Поп ап бургер-меню профиля']\n            self.profile_page.do_click(element['Редактировать профиль'])\n    \n        with allure.step('Очистить поле Никнейм'):\n            element = elements['Страница редактировать профиль']\n            self.edit_profile_page.clear(element['Поле никнейм'])\n    \n        with (allure.step('Ввести в поле рандомный никнейм')):\n            new_username = fake.user_name()\n            self.edit_profile_page.field_send_keys(element['Поле никнейм'], text=new_username)\n    \n        with allure.step('Нажать кнопку Сохранить'):\n            self.edit_profile_page.scroll_to_element(element['Кнопка сохранить'])\n            self.edit_profile_page.do_click(element['Кнопка сохранить'])\n    \n        with allure.step('Проверить, что отображается новый никнейм пользователя'):\n            self.profile_page.find_element(element_profile['О себе'])\n            element = elements['Общие']\n            self.assertion.text_in_element(element['Заголовок страницы'], expected_text=new_username)\n    \n        with allure.step('Вернуть профилю никнейм Aleska'):\n>           self.edit_profile_page.change_username(username='Aleska')\n\ntests/test_editing_profile.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/pages/edit_profile_page.py:28: in change_username\n    self.profile_page.do_click(config.locators.ProfilePageLocators.locators['Кнопка бургер-меню'])\nbase/base_page.py:79: in do_click\n    elem = WebDriverWait(self.driver, wait_time).until(EC.element_to_be_clickable(locator))\n../local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:96: in until\n    value = method(self._driver)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:364: in _predicate\n    element = visibility_of(target)(driver)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:173: in _predicate\n    return _element_if_visible(element)\n../local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:179: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:252: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f49b704ce60>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","steps":[{"name":"Нажать кнопку профиль","time":{"start":1738874898650,"stop":1738874898693,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Запомнить никнейм пользователя","time":{"start":1738874898693,"stop":1738874899762,"duration":1069},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Нажать на кнопку редактирования никнейма","time":{"start":1738874899762,"stop":1738874899807,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Нажать \"Редактировать профиль\"","time":{"start":1738874899807,"stop":1738874899848,"duration":41},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Очистить поле Никнейм","time":{"start":1738874899848,"stop":1738874901386,"duration":1538},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Ввести в поле рандомный никнейм","time":{"start":1738874901386,"stop":1738874901437,"duration":51},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Нажать кнопку Сохранить","time":{"start":1738874901437,"stop":1738874901992,"duration":555},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверить, что отображается новый никнейм пользователя","time":{"start":1738874901992,"stop":1738874903042,"duration":1050},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Вернуть профилю никнейм Aleska","time":{"start":1738874903042,"stop":1738874903109,"duration":67},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n","statusTrace":"  File \"/usr/workspace/tests/test_editing_profile.py\", line 56, in test_you_can_change_your_nickname\n    self.edit_profile_page.change_username(username='Aleska')\n  File \"/usr/workspace/model/pages/edit_profile_page.py\", line 28, in change_username\n    self.profile_page.do_click(config.locators.ProfilePageLocators.locators['Кнопка бургер-меню'])\n  File \"/usr/workspace/base/base_page.py\", line 79, in do_click\n    elem = WebDriverWait(self.driver, wait_time).until(EC.element_to_be_clickable(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 96, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py\", line 364, in _predicate\n    element = visibility_of(target)(driver)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py\", line 173, in _predicate\n    return _element_if_visible(element)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py\", line 179, in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n                      ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 252, in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1738874903157,"stop":1738874903345,"duration":188},"status":"passed","steps":[],"attachments":[{"uid":"130b2223ba77c934","name":"page_source","source":"130b2223ba77c934.html","type":"text/html","size":11651},{"uid":"f46d5b6592701bd1","name":"screenshot","source":"f46d5b6592701bd1.png","type":"image/png","size":15027},{"uid":"1adef8a07027965f","name":"browser_logs","source":"1adef8a07027965f.txt","type":"text/plain","size":56151}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"severity","value":"Critical"},{"name":"feature","value":"Редактирование профиля"},{"name":"tag","value":"regression"},{"name":"tag","value":"editing_profile"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_editing_profile"},{"name":"subSuite","value":"TestEditingProfile"},{"name":"host","value":"c6a72fb339a9"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_editing_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":38,"unknown":0,"total":42},"items":[{"uid":"e30f423761b5c38","status":"passed","time":{"start":1738871581734,"stop":1738871588466,"duration":6732}},{"uid":"4fd83261a0e7021b","status":"broken","statusDetails":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","time":{"start":1738864917848,"stop":1738864923290,"duration":5442}},{"uid":"a84ed7b0e1042b75","status":"passed","time":{"start":1738268572661,"stop":1738268580414,"duration":7753}},{"uid":"5478376fa555deff","status":"passed","time":{"start":1738099011962,"stop":1738099018174,"duration":6212}},{"uid":"5ae760cbdac93f73","status":"passed","time":{"start":1738005023476,"stop":1738005029681,"duration":6205}},{"uid":"636de1212c0d62c2","status":"passed","time":{"start":1738002352581,"stop":1738002358929,"duration":6348}},{"uid":"b0abf6131cefe281","status":"passed","time":{"start":1737928091012,"stop":1737928129865,"duration":38853}},{"uid":"c59d8d030324cc9a","status":"passed","time":{"start":1737842630875,"stop":1737842638642,"duration":7767}},{"uid":"d1788e592dab9476","status":"passed","time":{"start":1737831917763,"stop":1737831925507,"duration":7744}},{"uid":"376e1634ae1ac097","status":"passed","time":{"start":1737799253694,"stop":1737799261461,"duration":7767}},{"uid":"49a73a6deb2537c3","status":"passed","time":{"start":1737757527080,"stop":1737757534810,"duration":7730}},{"uid":"7efaa490a52e6d8b","status":"passed","time":{"start":1737744485092,"stop":1737744492840,"duration":7748}},{"uid":"c608713815489703","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: Не найден элемент с локатором ('xpath', '//div[contains(@class,\"user-info_about\")]')","time":{"start":1737652269373,"stop":1737652304858,"duration":35485}},{"uid":"e834712cfb76cb8a","status":"passed","time":{"start":1737569893206,"stop":1737569902142,"duration":8936}},{"uid":"e0f8bd4f51b39278","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","time":{"start":1737568961214,"stop":1737568961214,"duration":0}},{"uid":"e5d9e76d640049ab","status":"passed","time":{"start":1734034326107,"stop":1734034332506,"duration":6399}},{"uid":"bdedcac584185442","status":"passed","time":{"start":1733937002206,"stop":1733937009936,"duration":7730}},{"uid":"84ae6ba65fe040b5","status":"passed","time":{"start":1733865461949,"stop":1733865468130,"duration":6181}},{"uid":"5d00d851f0cd4015","status":"passed","time":{"start":1733859941340,"stop":1733859947612,"duration":6272}},{"uid":"634564cbc140b8b3","status":"passed","time":{"start":1733856570572,"stop":1733856576825,"duration":6253}}]},"tags":["editing_profile","regression"]},"source":"da982a6d65523fd7.json","parameterValues":[]}