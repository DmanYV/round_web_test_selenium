{"uid":"be213cc999fdf98e","name":"Просмотр списка заблокированных пользователей","fullName":"tests.test_editing_profile.TestEditingProfile#test_view_the_list_of_blocked_users","historyId":"eda85cfe274378cadbd16da85ef32a92","time":{"start":1739386769129,"stop":1739386770913,"duration":1784},"description":"Проверка происходит на пользователе Aleska, после теста разблокируются пользователи","descriptionHtml":"<p>Проверка происходит на пользователе Aleska, после теста разблокируются пользователи</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <model.elements.app.App object at 0x7f96c86db9b0>\nlocator = ('xpath', '//div[contains(@class,\"popup-dialog-fragment_item\")][contains(.,\"Заблокировать\")]')\nwait_time = 10\n\n    def do_click(self, locator, wait_time: int = 10):\n        \"\"\"\n    \n        Функция клик на элемент с ожиданием, что элемент кликабелен\n    \n        :param locator:\n            локатор элемента\n        :param wait_time:\n            время ожидания\n    \n        \"\"\"\n    \n        elem = WebDriverWait(self.driver, wait_time).until(EC.element_to_be_clickable(locator))\n        try:\n>           elem.click()\n\nbase/base_page.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f96c92358b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_editing_profile.TestEditingProfile object at 0x7f96c86aaa20>\nlogin_to_app = None\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...'carrot-messenger-frame'), 'Чат кэррот': ('xpath', '//div[contains(@class,\"carrot-messenger-frame-container\")]')}, ...}\n\n    @allure.title('Просмотр списка заблокированных пользователей')\n    @allure.description('Проверка происходит на пользователе Aleska, после теста разблокируются пользователи')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_view_the_list_of_blocked_users(self, login_to_app, elements):\n        with allure.step('Заблокировать пользователя Ekaterina_Fesan'):\n>           self.another_user_page.blocking_user_for_username('Ekaterina_Fesan')\n\ntests/test_editing_profile.py:304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/pages/another_user_page.py:30: in blocking_user_for_username\n    self.app.do_click(config.locators.AnotherUserPageLocators.locators['Заблокировать'])\nbase/base_page.py:84: in do_click\n    self.driver.execute_script(\"arguments[0].click();\", elem)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f96c92358b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1739385986311,"stop":1739385986312,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1739386761489,"stop":1739386761908,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1739386761908,"stop":1739386761909,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Авторизация пользователя в системе","time":{"start":1739386761909,"stop":1739386769128,"duration":7219},"status":"passed","steps":[{"name":"Авторизация пользователя в системе","time":{"start":1739386761909,"stop":1739386769128,"duration":7219},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"request","value":"<SubRequest 'login_to_app' for <Function test_view_the_list_of_blocked_users>>"},{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e72b7aced1f7a5b2ad2ad580e01116be\")>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Инициализация локаторов","time":{"start":1739386769128,"stop":1739386769128,"duration":0},"status":"passed","steps":[{"name":"Инициализация локаторов","time":{"start":1739386769128,"stop":1739386769128,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"request","value":"<SubRequest 'elements' for <Function test_view_the_list_of_blocked_users>>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"Проверка происходит на пользователе Aleska, после теста разблокируются пользователи","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <model.elements.app.App object at 0x7f96c86db9b0>\nlocator = ('xpath', '//div[contains(@class,\"popup-dialog-fragment_item\")][contains(.,\"Заблокировать\")]')\nwait_time = 10\n\n    def do_click(self, locator, wait_time: int = 10):\n        \"\"\"\n    \n        Функция клик на элемент с ожиданием, что элемент кликабелен\n    \n        :param locator:\n            локатор элемента\n        :param wait_time:\n            время ожидания\n    \n        \"\"\"\n    \n        elem = WebDriverWait(self.driver, wait_time).until(EC.element_to_be_clickable(locator))\n        try:\n>           elem.click()\n\nbase/base_page.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f96c92358b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_editing_profile.TestEditingProfile object at 0x7f96c86aaa20>\nlogin_to_app = None\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...'carrot-messenger-frame'), 'Чат кэррот': ('xpath', '//div[contains(@class,\"carrot-messenger-frame-container\")]')}, ...}\n\n    @allure.title('Просмотр списка заблокированных пользователей')\n    @allure.description('Проверка происходит на пользователе Aleska, после теста разблокируются пользователи')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_view_the_list_of_blocked_users(self, login_to_app, elements):\n        with allure.step('Заблокировать пользователя Ekaterina_Fesan'):\n>           self.another_user_page.blocking_user_for_username('Ekaterina_Fesan')\n\ntests/test_editing_profile.py:304: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmodel/pages/another_user_page.py:30: in blocking_user_for_username\n    self.app.do_click(config.locators.AnotherUserPageLocators.locators['Заблокировать'])\nbase/base_page.py:84: in do_click\n    self.driver.execute_script(\"arguments[0].click();\", elem)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f96c92358b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","steps":[{"name":"Заблокировать пользователя Ekaterina_Fesan","time":{"start":1739386769129,"stop":1739386770911,"duration":1782},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n","statusTrace":"  File \"/usr/workspace/tests/test_editing_profile.py\", line 304, in test_view_the_list_of_blocked_users\n    self.another_user_page.blocking_user_for_username('Ekaterina_Fesan')\n  File \"/usr/workspace/model/pages/another_user_page.py\", line 30, in blocking_user_for_username\n    self.app.do_click(config.locators.AnotherUserPageLocators.locators['Заблокировать'])\n  File \"/usr/workspace/base/base_page.py\", line 84, in do_click\n    self.driver.execute_script(\"arguments[0].click();\", elem)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1739386770960,"stop":1739386771146,"duration":186},"status":"passed","steps":[],"attachments":[{"uid":"4520a8ca055b950d","name":"page_source","source":"4520a8ca055b950d.html","type":"text/html","size":27720},{"uid":"e356005aaa101e3d","name":"screenshot","source":"e356005aaa101e3d.png","type":"image/png","size":35374},{"uid":"e863852dd4b47d4","name":"browser_logs","source":"e863852dd4b47d4.txt","type":"text/plain","size":5595}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"severity","value":"Critical"},{"name":"feature","value":"Редактирование профиля"},{"name":"tag","value":"regression"},{"name":"tag","value":"editing_profile"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_editing_profile"},{"name":"subSuite","value":"TestEditingProfile"},{"name":"host","value":"9b936bd7933a"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_editing_profile"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":21,"skipped":0,"passed":20,"unknown":0,"total":41},"items":[{"uid":"fbaddf16210411ac","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1739379475879,"stop":1739379487619,"duration":11740}},{"uid":"4eacd4c3ecdd15ff","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1739310301039,"stop":1739310315572,"duration":14533}},{"uid":"59fed25aeb6a9bb6","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738951824638,"stop":1738951837782,"duration":13144}},{"uid":"82180b0023e73ba8","status":"broken","statusDetails":"KeyError: 'access_token'","time":{"start":1738875066282,"stop":1738875066282,"duration":0}},{"uid":"ecd8694713af3020","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738871907792,"stop":1738871921585,"duration":13793}},{"uid":"fa11d9fb581b9d77","status":"broken","statusDetails":"KeyError: 'access_token'","time":{"start":1738865117555,"stop":1738865117555,"duration":0}},{"uid":"cdd6f45c689254af","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738268865036,"stop":1738268879720,"duration":14684}},{"uid":"dbba9609062740f","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738099295633,"stop":1738099308300,"duration":12667}},{"uid":"a82abc67f4ef4738","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738005309391,"stop":1738005322047,"duration":12656}},{"uid":"b54a8d2f616a326c","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1738002615262,"stop":1738002627894,"duration":12632}},{"uid":"97eff75f0407a3e","status":"broken","statusDetails":"urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=42775): Read timed out. (read timeout=120)","time":{"start":1737929487925,"stop":1737929487925,"duration":0}},{"uid":"319ff4688cd62bb3","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737842921295,"stop":1737842934423,"duration":13128}},{"uid":"115145f718e1cfb6","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737832182186,"stop":1737832194896,"duration":12710}},{"uid":"46ed8eb7aacba054","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737799483491,"stop":1737799496329,"duration":12838}},{"uid":"ee5b3894c0338dbf","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737757758349,"stop":1737757771154,"duration":12805}},{"uid":"542888ef82e36475","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737744742360,"stop":1737744754971,"duration":12611}},{"uid":"325e530b803bc654","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1737652604960,"stop":1737652618011,"duration":13051}},{"uid":"dd1af01916608b9d","status":"passed","time":{"start":1737570230677,"stop":1737570270198,"duration":39521}},{"uid":"c82860cd5be2b8e8","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","time":{"start":1737568963881,"stop":1737568963881,"duration":0}},{"uid":"9bd796fc820d5d06","status":"passed","time":{"start":1734034593653,"stop":1734034605774,"duration":12121}}]},"tags":["editing_profile","regression"]},"source":"be213cc999fdf98e.json","parameterValues":[]}