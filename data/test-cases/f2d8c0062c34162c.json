{"uid":"f2d8c0062c34162c","name":"Авторизация пользователя с валидным логин и паролем через API","fullName":"tests.test_autorization.TestAuthUser#test_api_auth_valid_username_and_valid_password","historyId":"1bf15bb2005561532f846b39d640f730","time":{"start":1719946382270,"stop":1719946382270,"duration":0},"description":"При проверке используются валидный логин и пароль пользователя Aleska","descriptionHtml":"<p>При проверке используются валидный логин и пароль пользователя Aleska</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","statusTrace":"request = <SubRequest 'driver' for <Function test_api_auth_valid_username_and_valid_password>>\n\n    @pytest.fixture(autouse=True, scope='function')\n    def driver(request):\n        chrome_options = Options()\n        chrome_options.add_argument('--window-size=1920,1080')  # размер окна is 1920x1080\n        # chrome_options.add_argument('--no-sandbox')  # no sandbox\n        chrome_options.add_argument('--disable-dev-shm-usage')  # overcome limited resource problems\n        # chrome_options.add_argument('--incognito')  # режим инкогнито\n        # chrome_options.add_argument('--headless')  # режим без UI\n        # chrome_options.add_argument('--ignore-certificate-errors')  # режим игнорирования сертификата\n>       driver = webdriver.Chrome(options=chrome_options)\n\nconftest.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa30216b230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...r/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1719946380764,"stop":1719946380786,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1719946382270,"stop":1719946382463,"duration":193},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1125, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 880, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/workspace/conftest.py\", line 17, in driver\n    driver = webdriver.Chrome(options=chrome_options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 299, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Авторизация пользователя"},{"name":"severity","value":"Critical"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_autorization"},{"name":"subSuite","value":"TestAuthUser"},{"name":"host","value":"4864ed1088cb"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_autorization"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":20,"unknown":0,"total":22},"items":[{"uid":"ce5f6e6a8c8856a7","status":"passed","time":{"start":1719942429663,"stop":1719942436159,"duration":6496}},{"uid":"96e34be72e7a29cb","status":"passed","time":{"start":1719942144231,"stop":1719942150734,"duration":6503}},{"uid":"27b7baa35de9651b","status":"passed","time":{"start":1719941461607,"stop":1719941466543,"duration":4936}},{"uid":"21dcf847cc92157e","status":"passed","time":{"start":1719937714486,"stop":1719937719812,"duration":5326}},{"uid":"aa94b626520bf901","status":"passed","time":{"start":1719937006115,"stop":1719937014644,"duration":8529}},{"uid":"2559e85b448a7473","status":"passed","time":{"start":1719935950097,"stop":1719935955194,"duration":5097}},{"uid":"355eae99f33e6017","status":"passed","time":{"start":1719934993781,"stop":1719934998721,"duration":4940}},{"uid":"f4a5d7eb13522879","status":"passed","time":{"start":1719859052821,"stop":1719859059796,"duration":6975}},{"uid":"2289b9e71e44e9c6","status":"passed","time":{"start":1719858476610,"stop":1719858482618,"duration":6008}},{"uid":"9ef52167627a7ff9","status":"passed","time":{"start":1719858275222,"stop":1719858282641,"duration":7419}},{"uid":"2f7850ad12c324a5","status":"passed","time":{"start":1719858017567,"stop":1719858022546,"duration":4979}},{"uid":"7007062b59d181f1","status":"passed","time":{"start":1719857822944,"stop":1719857828002,"duration":5058}},{"uid":"c66b31bfadfe27e1","status":"passed","time":{"start":1719857502587,"stop":1719857507142,"duration":4555}},{"uid":"6754b13d4372c8a0","status":"broken","statusDetails":"TypeError: BasePage.is_opened() takes 1 positional argument but 2 were given","time":{"start":1719857079135,"stop":1719857082976,"duration":3841}},{"uid":"ceb1147e18b7e254","status":"passed","time":{"start":1719386173917,"stop":1719386180966,"duration":7049}},{"uid":"70df87c95f09d7c8","status":"passed","time":{"start":1718084616842,"stop":1718084622529,"duration":5687}},{"uid":"9e1e9e99d1df2650","status":"passed","time":{"start":1716192824283,"stop":1716192830109,"duration":5826}},{"uid":"85ede995a8155fc3","status":"passed","time":{"start":1716071174093,"stop":1716071179592,"duration":5499}},{"uid":"f940a45d0ad65a1d","status":"passed","time":{"start":1716070769321,"stop":1716070775035,"duration":5714}},{"uid":"21ae54b9b19bc4a2","status":"passed","time":{"start":1716067973512,"stop":1716067979924,"duration":6412}}]},"tags":["regression"]},"source":"f2d8c0062c34162c.json","parameterValues":[]}