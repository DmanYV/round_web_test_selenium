{"uid":"e9abd23a878bbb4b","name":"Проверка валидации поля никнейм при вводе уже зарегистрированного никнейма","fullName":"tests.test_registration.TestRegistrationUser#test_validation_field_nickname_when_entering_an_already_registered_nickname","historyId":"6c03bba326b92af17c29d08a1f3d970c","time":{"start":1737568971062,"stop":1737568971062,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)","statusTrace":"request = <SubRequest 'driver' for <Function test_validation_field_nickname_when_entering_an_already_registered_nickname>>\n\n    @pytest.fixture(autouse=True, scope='function')\n    def driver(request):\n        chrome_options = Options()\n        chrome_options.add_argument('--window-size=1920,1080')  # размер окна is 1920x1080\n        # chrome_options.add_argument('--no-sandbox')  # no sandbox\n        chrome_options.add_argument('--disable-dev-shm-usage')  # overcome limited resource problems\n        # chrome_options.add_argument('--incognito')  # режим инкогнито\n        # chrome_options.add_argument('--headless')  # режим без UI\n        # chrome_options.add_argument('--ignore-certificate-errors')  # режим игнорирования сертификата\n>       driver = webdriver.Chrome(options=chrome_options)\n\nconftest.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd55b23a120>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...r/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1737568955067,"stop":1737568955068,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1737568971062,"stop":1737568971253,"duration":191},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n","statusTrace":"  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/usr/workspace/conftest.py\", line 23, in driver\n    driver = webdriver.Chrome(options=chrome_options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py\", line 45, in __init__\n    super().__init__(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py\", line 66, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 241, in __init__\n    self.start_session(capabilities)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 329, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 384, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"severity","value":"Normal"},{"name":"feature","value":"Регистрация пользователя"},{"name":"tag","value":"regression"},{"name":"tag","value":"registration"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_registration"},{"name":"subSuite","value":"TestRegistrationUser"},{"name":"host","value":"fa278e3f9e86"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_registration"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":24,"skipped":0,"passed":29,"unknown":0,"total":53},"items":[{"uid":"32b2a3f36678016f","status":"passed","time":{"start":1734035025615,"stop":1734035034788,"duration":9173}},{"uid":"2c7d2a1826b3a09a","status":"passed","time":{"start":1733937839301,"stop":1733937847616,"duration":8315}},{"uid":"9575285f2e0408ca","status":"passed","time":{"start":1733866412275,"stop":1733866420549,"duration":8274}},{"uid":"7abf16303c8918c9","status":"passed","time":{"start":1733860813187,"stop":1733860821691,"duration":8504}},{"uid":"dfe2233a695a4b57","status":"passed","time":{"start":1733857353246,"stop":1733857361645,"duration":8399}},{"uid":"b10008fd06eb3d1b","status":"passed","time":{"start":1733772295379,"stop":1733772305397,"duration":10018}},{"uid":"af24324c2f515a1c","status":"passed","time":{"start":1733766766659,"stop":1733766774823,"duration":8164}},{"uid":"a174a691adeeed4d","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1733422394167,"stop":1733422406968,"duration":12801}},{"uid":"6b4d61beaf397d61","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1726780711752,"stop":1726780723591,"duration":11839}},{"uid":"e159fcba8088ab1b","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1726777484482,"stop":1726777497359,"duration":12877}},{"uid":"d7cf9c3113b9527c","status":"passed","time":{"start":1724099184759,"stop":1724099194007,"duration":9248}},{"uid":"c48170b18e906ea6","status":"passed","time":{"start":1723829519743,"stop":1723829528607,"duration":8864}},{"uid":"a6fdb45083f553a2","status":"passed","time":{"start":1723751667845,"stop":1723751674896,"duration":7051}},{"uid":"1ffdbf1524f193ba","status":"passed","time":{"start":1723742124737,"stop":1723742131527,"duration":6790}},{"uid":"54cf2fdd4dd11668","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1723664502034,"stop":1723664537642,"duration":35608}},{"uid":"89ecc6c930080626","status":"passed","time":{"start":1723579264245,"stop":1723579272195,"duration":7950}},{"uid":"5b4aa1f37b79975f","status":"passed","time":{"start":1723496433775,"stop":1723496440219,"duration":6444}},{"uid":"a119da979626896d","status":"passed","time":{"start":1723150234033,"stop":1723150240967,"duration":6934}},{"uid":"cfb89998fbbc42da","status":"passed","time":{"start":1723148917459,"stop":1723148923421,"duration":5962}},{"uid":"b64e3f879268ea4e","status":"passed","time":{"start":1723147155411,"stop":1723147161557,"duration":6146}}]},"tags":["regression","registration"]},"source":"e9abd23a878bbb4b.json","parameterValues":[]}