{"uid":"cdcd57ed201faa67","name":"Авторизация пользователя с валидными данными по почтовому адресу","fullName":"tests.test_authorization.TestAuthUser#test_authorization_of_a_user_with_valid_data_by_email","historyId":"9b5a887ef841e6c7d3413b1ef2118c6e","time":{"start":1726776749230,"stop":1726776753838,"duration":4608},"description":"При проверке используются валидные данные пользователя Aleska","descriptionHtml":"<p>При проверке используются валидные данные пользователя Aleska</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <test_authorization.TestAuthUser object at 0x7fa1977805c0>\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...-sheet_icons\")]'), 'Название ачивки': ('xpath', '//div[contains(@class,\"achievement-item-bottom-sheet_title\")]')}, ...}\n\n    @allure.title('Авторизация пользователя с валидными данными по почтовому адресу')\n    @allure.description('При проверке используются валидные данные пользователя Aleska')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_authorization_of_a_user_with_valid_data_by_email(self, elements):\n        with allure.step('Открыть страницу логина'):\n            self.login_page.open()\n            element = elements['Страница логина']\n    \n        with allure.step('В поле логина вводим валидный почтовый адрес'):\n>           self.login_page.field_send_keys(element['Поле логин'], self.User.EMAIL)\n\ntests/test_authorization.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:128: in field_send_keys\n    element.send_keys(text)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa1954622a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726776348984,"stop":1726776349004,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1726776748808,"stop":1726776749229,"duration":421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1726776749229,"stop":1726776749230,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Инициализация локаторов","time":{"start":1726776749230,"stop":1726776749230,"duration":0},"status":"passed","steps":[{"name":"Инициализация локаторов","time":{"start":1726776749230,"stop":1726776749230,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"request","value":"<SubRequest 'elements' for <Function test_authorization_of_a_user_with_valid_data_by_email>>"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true,"attachmentStep":false}],"testStage":{"description":"При проверке используются валидные данные пользователя Aleska","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception","statusTrace":"self = <test_authorization.TestAuthUser object at 0x7fa1977805c0>\nelements = {'Банк ачивок': {'Блок ачивок': ('xpath', '//div[contains(@class,\"user-achievement-by-interests_container\")]'), 'Модал...-sheet_icons\")]'), 'Название ачивки': ('xpath', '//div[contains(@class,\"achievement-item-bottom-sheet_title\")]')}, ...}\n\n    @allure.title('Авторизация пользователя с валидными данными по почтовому адресу')\n    @allure.description('При проверке используются валидные данные пользователя Aleska')\n    @allure.severity('Critical')\n    @pytest.mark.regression\n    def test_authorization_of_a_user_with_valid_data_by_email(self, elements):\n        with allure.step('Открыть страницу логина'):\n            self.login_page.open()\n            element = elements['Страница логина']\n    \n        with allure.step('В поле логина вводим валидный почтовый адрес'):\n>           self.login_page.field_send_keys(element['Поле логин'], self.User.EMAIL)\n\ntests/test_authorization.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:128: in field_send_keys\n    element.send_keys(text)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:231: in send_keys\n    self._execute(\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa1954622a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is not attached to the page document\\\\n  (Session info: headless chrome=112.0.5615.165)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n../local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: StaleElementReferenceException","steps":[{"name":"Открыть страницу логина","time":{"start":1726776749230,"stop":1726776751676,"duration":2446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"В поле логина вводим валидный почтовый адрес","time":{"start":1726776751676,"stop":1726776753837,"duration":2161},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=112.0.5615.165); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\n\n","statusTrace":"  File \"/usr/workspace/tests/test_authorization.py\", line 65, in test_authorization_of_a_user_with_valid_data_by_email\n    self.login_page.field_send_keys(element['Поле логин'], self.User.EMAIL)\n  File \"/usr/workspace/base/base_page.py\", line 128, in field_send_keys\n    element.send_keys(text)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 231, in send_keys\n    self._execute(\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1726776753864,"stop":1726776754325,"duration":461},"status":"passed","steps":[],"attachments":[{"uid":"98bbd10707f7a931","name":"page_source","source":"98bbd10707f7a931.html","type":"text/html","size":11668},{"uid":"36a71b2ac9c6d638","name":"screenshot","source":"36a71b2ac9c6d638.png","type":"image/png","size":11018},{"uid":"705a95a4bf96d00a","name":"browser_logs","source":"705a95a4bf96d00a.txt","type":"text/plain","size":1100}],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":3,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"labels":[{"name":"feature","value":"Авторизация пользователя"},{"name":"severity","value":"Critical"},{"name":"tag","value":"regression"},{"name":"tag","value":"authorization"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_authorization"},{"name":"subSuite","value":"TestAuthUser"},{"name":"host","value":"b8c274508a65"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_authorization"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":35,"unknown":0,"total":36},"items":[{"uid":"f09e60645feb8e34","status":"passed","time":{"start":1724098394458,"stop":1724098401209,"duration":6751}},{"uid":"975ff4596917e2e5","status":"passed","time":{"start":1723828530340,"stop":1723828537781,"duration":7441}},{"uid":"97b9ebf56e46f294","status":"passed","time":{"start":1723750954494,"stop":1723750959579,"duration":5085}},{"uid":"10157d02008ed851","status":"passed","time":{"start":1723741418186,"stop":1723741424065,"duration":5879}},{"uid":"1c2961b5d14b6f90","status":"passed","time":{"start":1723664201120,"stop":1723664206016,"duration":4896}},{"uid":"22557e4733cb9eac","status":"passed","time":{"start":1723578506801,"stop":1723578513675,"duration":6874}},{"uid":"7d242b7c4007415e","status":"passed","time":{"start":1723495694563,"stop":1723495699507,"duration":4944}},{"uid":"61908bb025dd19a7","status":"passed","time":{"start":1723149613317,"stop":1723149618506,"duration":5189}},{"uid":"d474d36c166678f8","status":"passed","time":{"start":1723148318049,"stop":1723148323496,"duration":5447}},{"uid":"25389af14a97029","status":"passed","time":{"start":1723146587717,"stop":1723146592854,"duration":5137}},{"uid":"68e7dfbef019749c","status":"passed","time":{"start":1723064803540,"stop":1723064809292,"duration":5752}},{"uid":"84f77a0cf0c97089","status":"passed","time":{"start":1722976546643,"stop":1722976552821,"duration":6178}},{"uid":"6c40e9e6a34f748e","status":"passed","time":{"start":1722891755401,"stop":1722891760760,"duration":5359}},{"uid":"a59f8efdb28139ee","status":"passed","time":{"start":1722625559628,"stop":1722625564590,"duration":4962}},{"uid":"b7b135ed341de09f","status":"passed","time":{"start":1722546191892,"stop":1722546196963,"duration":5071}},{"uid":"3cd73966481fc67b","status":"passed","time":{"start":1722369976255,"stop":1722369984205,"duration":7950}},{"uid":"e124f018a41a504c","status":"passed","time":{"start":1722282988705,"stop":1722282993779,"duration":5074}},{"uid":"6161ad03f7646273","status":"passed","time":{"start":1722018160119,"stop":1722018165876,"duration":5757}},{"uid":"918216f62274f3f8","status":"passed","time":{"start":1721942581183,"stop":1721942586268,"duration":5085}},{"uid":"5254877afca99b4f","status":"passed","time":{"start":1721850705482,"stop":1721850710782,"duration":5300}}]},"tags":["authorization","regression"]},"source":"cdcd57ed201faa67.json","parameterValues":[]}